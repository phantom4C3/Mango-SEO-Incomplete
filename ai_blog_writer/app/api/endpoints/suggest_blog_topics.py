# ai-worker/app/api/endpoints/suggest_blog_topics.py
from fastapi import APIRouter, Depends, HTTPException
from ...clients.supabase_client import supabase_client
from ...core.security import verify_api_key
import uuid 
import logging
from datetime import datetime
from ...agents.topic_agent import TopicAgent  # âœ… Use the agent!
from shared_models.models import TopicSuggestionRequest
from ...core.security import verify_internal_secret
from fastapi import Depends

router = APIRouter()
logger = logging.getLogger(__name__)


 
    
@router.post("/suggest-topics", dependencies=[Depends(verify_internal_secret)] 
             )
async def suggest_topics(request: TopicSuggestionRequest):
    """
    AI Worker endpoint: Generates topics and saves directly to unified topics table.
    """
    print("ðŸ”¹ [API] /blog/suggest-topics called")
    print("ðŸ”¹ [API] Request payload:", request.dict())
    try:
        website_info = request.website_info
        
        
        # âœ… Dummy IDs for testing
        user_id = str(uuid.uuid4())
        task_id = str(uuid.uuid4())
            
            # Insert dummy user if not exists
        await supabase_client.insert_into("users", {
            "id": user_id,
            "name": "Dummy User",
            "email": f"dummy_{user_id[:8]}@example.com",
            "created_at": datetime.utcnow().isoformat()
        })

        # Insert dummy blog task if not exists
        await supabase_client.insert_into("blog_tasks", {
            "id": task_id,
            "user_id": user_id,
            "status": "pending",
            "created_at": datetime.utcnow().isoformat()
        })

        # user_id = website_info.user_id
        # task_id = website_info.task_id
        website_url = website_info.website_url



        print(f"Generating topics for user {user_id}, task {task_id}, called topic agent...")

        # âœ… USE TOPIC AGENT INSTEAD OF DIRECT AI CALLS
        topic_agent = TopicAgent()
        topics = await topic_agent.generate_blog_topics(
            website_url=website_info.website_url,
            title=website_info.title,
            description=website_info.description,
            count=request.count,   # Use requested number
        )

        print(f"ðŸ”¹ [API] Generated {len(topics)} topics")


        if not topics:
            raise HTTPException(status_code=500, detail="No topics generated by TopicAgent")

        # 3. Save topics to unified topics table
        topic_records = []
        for i, topic in enumerate(topics):
            topic_id = str(uuid.uuid4())
            record = {
                "id": topic_id,
                "user_id": user_id,
                "task_id": task_id,
                "website_url": website_info.website_url,
                "title": topic if isinstance(topic, str) else topic.get("title", f"Topic {i+1}"),
                "slug": f"topic-{i+1}",
                "meta_description": "" if isinstance(topic, str) else topic.get("meta_description", ""),
                "target_keyword": "" if isinstance(topic, str) else topic.get("target_keyword", ""),
                "content_angle": "informational" if isinstance(topic, str) else topic.get("content_angle", "informational"),
                "status": "suggested",
                "blog_status": "not_generated",
                "ai_generated": True,
                "created_at": datetime.utcnow().isoformat(),
                "updated_at": datetime.utcnow().isoformat()
            }
            topic_records.append(record)


        # Bulk insert to unified topics table
        if topic_records:
            await supabase_client.insert_into("topics", topic_records)
            print(f"Inserted {len(topic_records)} topics for task {task_id}")


        # 4. Update task status to completed
        await supabase_client.update_table(
            "blog_tasks",
            filters={"id": task_id},
            updates={
                "status": "completed",
                "updated_at": datetime.utcnow().isoformat(), 
            }
        ) 

        return {"status": "success", "topics_generated": len(topic_records)}

    except Exception as e:
        print(f"Error in suggest_topics: {str(e)}")
        
        # Update task as failed
        try:
            await supabase_client.update_table(
                "blog_tasks",
                filters={"id": request.website_info.task_id},
                updates={
                    "status": "failed",
                    "updated_at": datetime.utcnow().isoformat(), 
                }
            )

        except Exception:
            print("Failed to update task status to failed")
        
        raise HTTPException(status_code=500, detail=f"Topic suggestion failed: {str(e)}")
    
